# Multi-stage Dockerfile for fullstack application
# Stage 1: Build frontend
ARG NODE_VERSION=20
ARG PYTHON_VERSION=3.11
FROM node:${NODE_VERSION}-alpine AS frontend-build

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install dependencies with clean cache
RUN npm ci --ignore-scripts && \
    npm cache clean --force

# Copy frontend source code
COPY frontend/ ./

# Build the application  
RUN npm run build

# Stage 2: Build the fullstack image
FROM python:${PYTHON_VERSION}-slim

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    nginx \
    supervisor \
    wget \
    curl \
    net-tools && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy Python requirements and install dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend application code
COPY backend/app/ ./app/

# Create data directory with proper permissions
RUN mkdir -p /app/data/output && \
    chmod -R 755 /app/data

# Copy built frontend from build stage
COPY --from=frontend-build /app/dist /usr/share/nginx/html

# Copy nginx configuration
RUN rm -f /etc/nginx/conf.d/default.conf
COPY nginx/nginx.conf.fullstack /etc/nginx/conf.d/default.conf
COPY nginx/nginx-main.conf /etc/nginx/nginx.conf

# Copy supervisor configuration
COPY supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create nginx cache directories and set permissions
RUN mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/log/supervisor && \
    chown -R www-data:www-data /var/cache/nginx && \
    chown -R www-data:www-data /usr/share/nginx/html && \
    chown -R www-data:www-data /var/log/nginx && \
    chmod -R 755 /var/log/supervisor

# Expose port 80 (frontend and API through nginx)
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:80/health || exit 1

# Start supervisor (which will manage nginx and uvicorn)
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
